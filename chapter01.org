* Introduction

*Your co-workers:* A bunch of Computer Science grads who graduated
from various impressive universities. Software Engineering is
something they only learned in theory at first but have applied those
abstract concepts to real-world applications with good effect.

*You:* A smart person who, through sheer force of will, have
established yourself as a Pretty Okay® self-taught developer. To you,
Software Development is less of a field of a study and more of a
trade. Nails? That’s your programming language. Hammer? That’s
git. When things don’t work you have no qualms with rolling up your
sleeves and diving deep into the inner workings of codebases. You
might not know exactly why things are the way they are, but you have
great intuition.

If this sounds familiar, give yourself a pat on the back. You took the
hard route. Don’t diminish your accomplishments only because the
School of Life doesn’t give out framed pieces of paper. This paper is
for people like you. It’s goal is to be an easy-to-digest guide to Big
O Notation for self-taught developers. Explicitly:

- I'll be using mathematical terminology only when absolutely
  necessary. I'm not here to impress you, I'm here to teach you.
- When I do use mathematical terminology, I'll do my best to explain
  it.
- Always use a concrete example when explaining a concept with
  runnable code. Sometimes its easier to learn by doing.
- Give examples of how certain concepts are useful in your day-to-day
  job.

Now, let’s learn about Big O Notation.
